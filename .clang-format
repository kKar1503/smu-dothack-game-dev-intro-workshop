# This is reference to CS101 Coding Style Google Doc.
# This provides you an auto-formatting option that tries its best to mimic
# the coding style guide that's given.
#
# Formatting tool is mostly for convenience, but whatever you need to know about
# the Coding Style is also copied here as comments.

# Starting Point we start off with LLVM based style.
# Reference to LLVM style can be found here:
# https://llvm.org/docs/CodingStandards.html
BasedOnStyle: LLVM

# 1. Line Length
#
# - Maximum line length is 80 characters. Long lines are not handled well by
#   many terminals and tools.
ColumnLimit: 80
# - Short lines are more comfortable to read.
# - When an expression will not fit on a single line, break it according to
#   these general principles:
#   a. Break after a comma.
#   b. Break before an operator.
BreakBeforeBinaryOperators: NonAssignment
#   c. Align the new line with the beginning of the expression at the same level
#      on the previous line.
AlignAfterOpenBracket: Align
#   d. If the above rules lead to confusing code or to code thatâ€™s squished up
#      against the right margin, just indent 8 spaces instead.

# 2. Simple Statements
#
# Each line should contain at most one statement.
#
# // Good
# int n = 0;
# printf("Enter n:");
# scanf("%d", &n);
#
# // BAD
# int n = 0; printf("Enter n:"); scanf("%d", &n);
# There is no formatting for making one statement per line.
# But following is some rules that bring about the same idea.
# For things otherr than just statements.
AllowShortIfStatementsOnASingleLine: Never
AllowShortLoopsOnASingleLine: false
AllowShortCaseLabelsOnASingleLine: false
AllowShortBlocksOnASingleLine: Never
AllowShortFunctionsOnASingleLine: None
AllowShortLambdasOnASingleLine: None

# 3. Variable Declaration
#
# - One declaration per line is recommended since it encourages commenting.
# - Use declaration and initialization together instead of separately
# - Always initialize variables. Most problems can be traced back to a pointer
#   or variable left uninitialized.
# There is not really any formatting rule for this.
# However, there are some stuff that I kinda like in my own code.
# Which is declaration aligning, you can keep this if you want.
# You can refer to the comparison below:
#
# // With the alignments
# int a            = 1;
# int somelongname = 2;
# double c         = 3;
#
# // Without the alignments
# int a = 1;
# int somelongname = 2;
# double c = 3;
AlignConsecutiveAssignments:
  Enabled: true
AlignConsecutiveBitFields:
  Enabled: true
AlignConsecutiveDeclarations:
  Enabled: true
AlignConsecutiveMacros:
  Enabled: true
AlignEscapedNewlines: Left
AlignOperands: Align

# 4. Meaningful variable names
#
# - Variable names should be short yet meaningful.
# - One-character variable names should be avoided.
# - Use lower case letters for variable names and function names, with multiple
#   words separated by underscore _. Example, num_females instead of numFemales.
# - Give as descriptive a name as possible, within reason. Do not worry about
#   saving horizontal space as it is far more important to make your code
#   immediately understandable by a new reader.
# - Do not use abbreviations that are ambiguous or unfamiliar to readers
#   outside your project, and do not abbreviate by deleting letters within a
#   word. Abbreviations that would be familiar to someone outside your project
#   with relevant domain knowledge are OK.
#   // Good
#   double height = 1.98;
#   double weight = 78.5;
#   double bmi = weight / (height * height);
#
#   // Bad
#   double a = 1.98;
#   double b = 78.5;
#   double c = b / (a * a);
# - No magic number so that it is easier to read and understand by others.
#   // Good
#   if (input >= '0' && input <= '9') {
#       printf("digit\n");
#   }
#
#   // Bad
#   if (48 <= input && input <= 57) {
#       printf("digit\n");
#   }
# There is no formatting rule for this.

# 5. Indentation
#
# - 4 spaces used for indentation (instead of tabs)
UseTab: Never
IndentWidth: 4
TabWidth: 4
# - K&R brace placement.
BreakBeforeBraces: Attach
# - Curly braces MUST be used even for single statement blocks.
# There is a formatting rule for this. But I don't recommend this as I find
# that there is too much magic to these kind of formatting and in some cases
# you actually might find the rule is screwing up your code. But if you want
# to try, you can uncomment this.
# Read more about this here:
# https://clang.llvm.org/docs/ClangFormatStyleOptions.html#insertbraces
# InsertBraces: true

# 6. Blank Lines
#
# - Declare variables in as local a scope as possible, and as close to the first
#   use as possible. This makes it easier for the reader to find the declaration
#   and see what type the variable is and what it was initialized to.
# - Leave a blank line after each logical chunk of code
# This is rather opinionated on you leave vertical whitespace in your code, but
# should be something you get more used to as you gain experience.
#
# // Good
# // prompt for n1 ("one logical chunk")
# int n1;
# printf("Enter n1:");
# scanf("%d", &n1);
#
# // prompt for n2
# int n2;
# printf("Enter n2:");
# scanf("%d", &n2);
#
#
# // BAD
# int n1;
# int n2;
# int n3;
# printf("Enter n1:");
# scanf("%d", &n1);
# printf("Enter n2:");
# scanf("%d", &n2);

# 7. Blank Space
# - All binary operators should be separated from their operands by spaces.
# - Blank spaces should never separate unary operators such as unary minus,
#   increment ("++"), and decrement ("--") from their operands.
#
# // Good
# int a = -3;
# a += c + d;
# a = (a + b) / (c * d);
#
# // BAD
# int a=- 3;
# a+=c+d;
# a=(a+b)/(c*d);
SpacesInParens: Custom
SpacesInParensOptions:
  InConditionalStatements: false
  InCStyleCasts: false
  InEmptyParentheses: false
SpaceBeforeAssignmentOperators: true
SpaceBeforeParens: ControlStatements
SpacesBeforeTrailingComments: 1
SpacesInAngles: false
SpacesInContainerLiterals: false

# 8. For loops
# - Do not write conditionals in loop to execute a piece of code in the
#   first/last iteration.
#
#   // Good
#   int n = 5;
#   for (int i = 0; i < n - 1; i++) {
#       printf("sad");
#   }
#   printf("happy");
#
#   // Bad
#   int n = 5;
#   for (int i = 0; i < n - 1; i++) {
#       printf("sad");
#       if (i == n - 1) {
#           printf("happy");
#       }
#   }
#
# - A for statement should have the following form:
#   for (initialization; condition; update) {
#       statements;
#   }
#
#   // GOOD
#   for (int i = 0; i < 3; i++) {
#       printf("%d\n", i);
#   }
#
#   // BAD
#   for(int i=0;i<3;i++){
#       printf("%d\n", i);
#   }
#
# - Avoid break and continue in an infinite loop.
#
#   // bad
#   for (int i = 0;  ; i++) {
#       if (i == 3) {
#           break;
#       }
#       // stmts here
#   }
#
#   // good
#   for (int i = 0; i < 3; i++) {
#       // stmts here
#   }
#
# - Avoid writing unrelated statements in a for loop.
#
#   // bad
#   int sum;
#   for (i = 0, sum = 0; i < 5; ++i) {
#       // stmts
#   }
#
#   int y = 0;
#   for (i = 0; i < 5; ++i, y = y + 2) {
#      // Loop body
#   }
#
#   // good
#   int sum = 0;
#   for (int i = 0; i < 5; i++) {
#       // stmts
#   }
#
#   int y = 0;
#   for (i = 0; i < 5; ++i) {
#      // Loop body
#       y = y + 2;
#   }

# 9. if, if-else, if-else-if-else
#
# - The if-else class of statements should have the following form:
#
#   // there is a space between the keywords (if, else) and the
#   // following parentheses, and between the parentheses and
#   // the next curly bracket.
#   if (condition) {
#       statements;
#   }
#
#   if (condition) {
#       statements;
#   } else {
#       statements;
#   }
#
#   if (condition) {
#       statements;
#   } else if (condition) {
#       statements;
#   } else if (condition) {
#       statements;
#   }
#
# - Do not check boolean values for equality. By using implicit comparisons,
#   the resulting code can be read more like conversational English.
#
#   bool is_happy = false;
#
#   // Good
#   if (is_happy) {
#     // do something
#   }
#
#   if (!is_happy) {
#     // do something
#   }
#
#   // BAD
#   if (is_happy == true) {
#     // do something
#   }
#
#   if (is_happy == false) {
#     // do something
#   }
#
# - If there is a branching logic with one empty branch, rewrite it without
#   the empty branch.
#
#   // original
#   if (x > 3) {
#       // do nothing
#   } else {
#       printf("apple\n");
#   }
#
#   // suggested
#   if (x <= 3) {
#       printf("apple\n");
#   }
#
# - Avoid nesting if statements that can be written as one if statement.
#
#   // good
#   if (x > 30) {
#       printf("apple\n");
#   } else if (x > 20) {
#       printf("orange\n");
#   } else if (x > 10) {
#       printf("pear\n");
#   } else {
#       printf("papaya\n");
#   }
#
#
#   // bad
#   if (x > 30) {
#       printf("apple\n");
#   } else {
#       if (x > 20) {
#           printf("orange\n");
#       } else {
#           if (x > 10) {
#               printf("pear\n");
#           } else {
#               printf("papaya\n");
#           }
#       }
#   }
#
# - If the intention is that only one block of code will execute, use
#   if-else-if-else.
#
#   // good
#   if (color == 'R') {
#       printf("red\n");
#   } else if (color == 'G') {
#       printf("green\n");
#   } else if (color == 'B') {
#       printf("blue\n");
#   }
#
#   // bad
#   if (color == 'R') {
#       printf("red\n");
#   }
#
#   if (color == 'G') {
#       printf("green\n");
#   }
#
#   if (color == 'B') {
#       printf("blue\n");
#   }

# Some nice to haves:

# Indents switch case labels
IndentCaseLabels: true
